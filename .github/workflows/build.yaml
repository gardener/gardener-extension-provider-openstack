name: Build

on:
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
        default: snapshot
        description: |
          the mode to use. either `snapshot` or `release`. Will affect effective version, as well
          as target-oci-registry.

jobs:
  prepare:
    uses: gardener/cc-utils/.github/workflows/prepare.yaml@master
    with:
      mode: ${{ inputs.mode }}
      version-commit-callback-action-path: .github/actions/prepare-release
    permissions:
      contents: read
      pull-requests: write # needed to rm `reviewed/ok-to-test` label

  oci-images:
    name: Build OCI-Images
    needs:
      - prepare
    permissions:
      contents: read
      packages: write
      id-token: write
    secrets: inherit
    uses: gardener/cc-utils/.github/workflows/oci-ocm.yaml@master
    strategy:
      matrix:
        args:
          - name: gardener-extension-provider-openstack
            target: gardener-extension-provider-openstack
            oci-repository: gardener/extensions/provider-openstack
            ocm-labels:
              name: gardener.cloud/cve-categorisation
              value:
                network_exposure: protected
                authentication_enforced: false
                user_interaction: gardener-operator
                confidentiality_requirement: high
                integrity_requirement: high
                availability_requirement: high
          - name: gardener-extension-admission-openstack
            target: gardener-extension-admission-openstack
            oci-repository: gardener/extensions/admission-openstack
            ocm-labels:
              name: gardener.cloud/cve-categorisation
              value:
                network_exposure: protected
                authentication_enforced: false
                user_interaction: end-user
                confidentiality_requirement: high
                integrity_requirement: high
                availability_requirement: high
    with:
      name: ${{ matrix.args.name }}
      version: ${{ needs.prepare.outputs.version }}
      target: ${{ matrix.args.target }}
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: ${{ matrix.args.oci-repository }}
      oci-platforms: linux/amd64,linux/arm64
      ocm-labels: ${{ toJSON(matrix.args.ocm-labels) }}
      extra-tags: latest

  helmcharts:
    name: Build Helmcharts
    needs:
      - prepare
      - oci-images
    permissions:
      contents: read
      packages: write
      id-token: write
    uses: gardener/cc-utils/.github/workflows/helmchart-ocm.yaml@master
    strategy:
      matrix:
        args:
          - name: provider-openstack
            dir: charts/gardener-extension-provider-openstack
            oci-repository: charts/gardener/extensions
            ocm-mappings:
              - ref: ocm-resource:gardener-extension-provider-openstack.repository
                attribute: image.repository
              - ref: ocm-resource:gardener-extension-provider-openstack.tag
                attribute: image.tag
          - name: admission-openstack-application
            dir: charts/gardener-extension-admission-openstack/charts/application
            oci-repository: charts/gardener/extensions
            ocm-mappings:
              - ref: ocm-resource:gardener-extension-admission-openstack.repository
                attribute: image.repository
              - ref: ocm-resource:gardener-extension-admission-openstack.tag
                attribute: image.tag
          - name: admission-openstack-runtime
            dir: charts/gardener-extension-admission-openstack/charts/runtime
            oci-repository: charts/gardener/extensions
            ocm-mappings:
              - ref: ocm-resource:gardener-extension-admission-openstack.repository
                attribute: image.repository
              - ref: ocm-resource:gardener-extension-admission-openstack.tag
                attribute: image.tag

    with:
      name: ${{ matrix.args.name }}
      dir: ${{ matrix.args.dir }}
      oci-registry: ${{ needs.prepare.outputs.oci-registry }}
      oci-repository: ${{ matrix.args.oci-repository }}
      ocm-mappings: ${{ toJSON(matrix.args.ocm-mappings) }}

  verify:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      - uses: gardener/cc-utils/.github/actions/trusted-checkout@master
        with:
          remove-trusted-label: false
      - name: run-verify
        run: |
          set -euo pipefail
          .ci/verify
          # verify calls `make sast-report`, which generates `gosec-report.sarif`
          mkdir /tmp/blobs.d
          tar czf /tmp/blobs.d/gosec-report.tar.gz gosec-report.sarif
      - name: add-sast-report-to-component-descriptor
        uses: gardener/cc-utils/.github/actions/export-ocm-fragments@master
        with:
          blobs-directory: /tmp/blobs.d
          ocm-resources: |
            name: gosec-report
            relation: local
            access:
              type: localBlob
              localReference: gosec-report.tar.gz
            labels:
              - name: gardener.cloud/purposes
                value:
                  - lint
                  - sast
                  - gosec
              - name: gardener.cloud/comment
                value: |
                  we use gosec (linter) for SAST scans
                  see: https://github.com/securego/gosec
