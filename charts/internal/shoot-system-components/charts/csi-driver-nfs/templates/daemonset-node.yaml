---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: csi-driver-nfs-node
  namespace: {{ .Release.Namespace }}
  labels:
    app: csi
    role: driver-nfs-node
    # node.gardener.cloud/critical-component: "true" # enable after gardener/gardener#7406
spec:
  selector:
    matchLabels:
      app: csi
      role: driver-nfs-node
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: csi
        role: driver-nfs-node
        # node.gardener.cloud/critical-component: "true" # enable after gardener/gardener#7406
    spec:
      hostNetwork: true # original nfs connection would be broken without hostNetwork setting
      dnsPolicy: {{ .Values.dnsPolicy }}
      priorityClassName: system-node-critical
      serviceAccountName: csi-driver-nfs-node
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: driver-nfs-node
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: {{ index .Values.images "csi-driver-nfs" }}
          args :
            - "--v=2"
            - "--nodeid=$(NODE_ID)"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--drivername=nfs.csi.k8s.io"
            - "--mount-permissions={{ .Values.driver.mountPermissions }}"
          env:
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
          ports:
            - containerPort: {{ .Values.node.livenessProbe.healthPort }}
              name: healthz
              protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 30
{{- if .Values.resources.driverNode }}
          resources:
{{ toYaml .Values.resources.driverNode | indent 12 }}
{{- end }}
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"

        - name: csi-liveness-probe
          image: {{ index .Values.images "csi-liveness-probe" }}
          args:
            - --csi-address=/csi/csi.sock
            - --health-port={{ .Values.node.livenessProbe.healthPort }}
{{- if .Values.resources.livenessProbe }}
          resources:
{{ toYaml .Values.resources.livenessProbe | indent 12 }}
{{- end }}
          volumeMounts:
            - name: socket-dir
              mountPath: /csi

        - name: csi-node-driver-registrar
          image: {{ index .Values.images "csi-node-driver-registrar" }}
          livenessProbe:
            exec:
              command:
                - /csi-node-driver-registrar
                - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
                - --mode=kubelet-registration-probe
            initialDelaySeconds: 30
            timeoutSeconds: 15
          args:
            - --v=2
            - --csi-address=/csi/csi.sock
            - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
          env:
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/csi-nfsplugin/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
{{- if .Values.resources.nodeDriverRegistrar }}
          resources:
{{ toYaml .Values.resources.nodeDriverRegistrar | indent 12 }}
{{- end }}                  
          volumeMounts:
            - name: socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration

      volumes:
        - name: socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi-nfsplugin
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
          name: registration-dir
