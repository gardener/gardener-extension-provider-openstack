// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-openstack/pkg/openstack/client (interfaces: Factory,FactoryFactory,Compute,DNS,Networking,Loadbalancing,SharedFilesystem)
//
// Generated by this command:
//
//	mockgen -destination=mocks/client_mocks.go -package=mocks . Factory,FactoryFactory,Compute,DNS,Networking,Loadbalancing,SharedFilesystem
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	openstack "github.com/gardener/gardener-extension-provider-openstack/pkg/openstack"
	client "github.com/gardener/gardener-extension-provider-openstack/pkg/openstack/client"
	keypairs "github.com/gophercloud/gophercloud/v2/openstack/compute/v2/keypairs"
	servergroups "github.com/gophercloud/gophercloud/v2/openstack/compute/v2/servergroups"
	servers "github.com/gophercloud/gophercloud/v2/openstack/compute/v2/servers"
	loadbalancers "github.com/gophercloud/gophercloud/v2/openstack/loadbalancer/v2/loadbalancers"
	floatingips "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/extensions/layer3/floatingips"
	routers "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/extensions/layer3/routers"
	groups "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/extensions/security/groups"
	rules "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/extensions/security/rules"
	networks "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/networks"
	ports "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/ports"
	subnets "github.com/gophercloud/gophercloud/v2/openstack/networking/v2/subnets"
	sharenetworks "github.com/gophercloud/gophercloud/v2/openstack/sharedfilesystems/v2/sharenetworks"
	gomock "go.uber.org/mock/gomock"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Compute mocks base method.
func (m *MockFactory) Compute(options ...client.Option) (client.Compute, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Compute", varargs...)
	ret0, _ := ret[0].(client.Compute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compute indicates an expected call of Compute.
func (mr *MockFactoryMockRecorder) Compute(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockFactory)(nil).Compute), options...)
}

// DNS mocks base method.
func (m *MockFactory) DNS(options ...client.Option) (client.DNS, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DNS", varargs...)
	ret0, _ := ret[0].(client.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DNS indicates an expected call of DNS.
func (mr *MockFactoryMockRecorder) DNS(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNS", reflect.TypeOf((*MockFactory)(nil).DNS), options...)
}

// Images mocks base method.
func (m *MockFactory) Images(options ...client.Option) (client.Images, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Images", varargs...)
	ret0, _ := ret[0].(client.Images)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Images indicates an expected call of Images.
func (mr *MockFactoryMockRecorder) Images(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Images", reflect.TypeOf((*MockFactory)(nil).Images), options...)
}

// Loadbalancing mocks base method.
func (m *MockFactory) Loadbalancing(options ...client.Option) (client.Loadbalancing, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Loadbalancing", varargs...)
	ret0, _ := ret[0].(client.Loadbalancing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Loadbalancing indicates an expected call of Loadbalancing.
func (mr *MockFactoryMockRecorder) Loadbalancing(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loadbalancing", reflect.TypeOf((*MockFactory)(nil).Loadbalancing), options...)
}

// Networking mocks base method.
func (m *MockFactory) Networking(options ...client.Option) (client.Networking, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Networking", varargs...)
	ret0, _ := ret[0].(client.Networking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Networking indicates an expected call of Networking.
func (mr *MockFactoryMockRecorder) Networking(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Networking", reflect.TypeOf((*MockFactory)(nil).Networking), options...)
}

// SharedFilesystem mocks base method.
func (m *MockFactory) SharedFilesystem(options ...client.Option) (client.SharedFilesystem, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SharedFilesystem", varargs...)
	ret0, _ := ret[0].(client.SharedFilesystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SharedFilesystem indicates an expected call of SharedFilesystem.
func (mr *MockFactoryMockRecorder) SharedFilesystem(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SharedFilesystem", reflect.TypeOf((*MockFactory)(nil).SharedFilesystem), options...)
}

// Storage mocks base method.
func (m *MockFactory) Storage(options ...client.Option) (client.Storage, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Storage", varargs...)
	ret0, _ := ret[0].(client.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Storage indicates an expected call of Storage.
func (mr *MockFactoryMockRecorder) Storage(options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockFactory)(nil).Storage), options...)
}

// MockFactoryFactory is a mock of FactoryFactory interface.
type MockFactoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryFactoryMockRecorder is the mock recorder for MockFactoryFactory.
type MockFactoryFactoryMockRecorder struct {
	mock *MockFactoryFactory
}

// NewMockFactoryFactory creates a new mock instance.
func NewMockFactoryFactory(ctrl *gomock.Controller) *MockFactoryFactory {
	mock := &MockFactoryFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactoryFactory) EXPECT() *MockFactoryFactoryMockRecorder {
	return m.recorder
}

// NewFactory mocks base method.
func (m *MockFactoryFactory) NewFactory(ctx context.Context, credentials *openstack.Credentials) (client.Factory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFactory", ctx, credentials)
	ret0, _ := ret[0].(client.Factory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFactory indicates an expected call of NewFactory.
func (mr *MockFactoryFactoryMockRecorder) NewFactory(ctx, credentials any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFactory", reflect.TypeOf((*MockFactoryFactory)(nil).NewFactory), ctx, credentials)
}

// MockCompute is a mock of Compute interface.
type MockCompute struct {
	ctrl     *gomock.Controller
	recorder *MockComputeMockRecorder
	isgomock struct{}
}

// MockComputeMockRecorder is the mock recorder for MockCompute.
type MockComputeMockRecorder struct {
	mock *MockCompute
}

// NewMockCompute creates a new mock instance.
func NewMockCompute(ctrl *gomock.Controller) *MockCompute {
	mock := &MockCompute{ctrl: ctrl}
	mock.recorder = &MockComputeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompute) EXPECT() *MockComputeMockRecorder {
	return m.recorder
}

// CreateKeyPair mocks base method.
func (m *MockCompute) CreateKeyPair(ctx context.Context, name, publicKey string) (*keypairs.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyPair", ctx, name, publicKey)
	ret0, _ := ret[0].(*keypairs.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyPair indicates an expected call of CreateKeyPair.
func (mr *MockComputeMockRecorder) CreateKeyPair(ctx, name, publicKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyPair", reflect.TypeOf((*MockCompute)(nil).CreateKeyPair), ctx, name, publicKey)
}

// CreateServer mocks base method.
func (m *MockCompute) CreateServer(ctx context.Context, createOpts servers.CreateOpts) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, createOpts)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockComputeMockRecorder) CreateServer(ctx, createOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockCompute)(nil).CreateServer), ctx, createOpts)
}

// CreateServerGroup mocks base method.
func (m *MockCompute) CreateServerGroup(ctx context.Context, name, policy string) (*servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerGroup", ctx, name, policy)
	ret0, _ := ret[0].(*servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerGroup indicates an expected call of CreateServerGroup.
func (mr *MockComputeMockRecorder) CreateServerGroup(ctx, name, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerGroup", reflect.TypeOf((*MockCompute)(nil).CreateServerGroup), ctx, name, policy)
}

// DeleteKeyPair mocks base method.
func (m *MockCompute) DeleteKeyPair(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyPair", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyPair indicates an expected call of DeleteKeyPair.
func (mr *MockComputeMockRecorder) DeleteKeyPair(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPair", reflect.TypeOf((*MockCompute)(nil).DeleteKeyPair), ctx, name)
}

// DeleteServer mocks base method.
func (m *MockCompute) DeleteServer(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockComputeMockRecorder) DeleteServer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockCompute)(nil).DeleteServer), ctx, id)
}

// DeleteServerGroup mocks base method.
func (m *MockCompute) DeleteServerGroup(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerGroup", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerGroup indicates an expected call of DeleteServerGroup.
func (mr *MockComputeMockRecorder) DeleteServerGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerGroup", reflect.TypeOf((*MockCompute)(nil).DeleteServerGroup), ctx, id)
}

// FindFlavorID mocks base method.
func (m *MockCompute) FindFlavorID(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlavorID", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlavorID indicates an expected call of FindFlavorID.
func (mr *MockComputeMockRecorder) FindFlavorID(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlavorID", reflect.TypeOf((*MockCompute)(nil).FindFlavorID), ctx, name)
}

// FindServersByName mocks base method.
func (m *MockCompute) FindServersByName(ctx context.Context, name string) ([]servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServersByName", ctx, name)
	ret0, _ := ret[0].([]servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServersByName indicates an expected call of FindServersByName.
func (mr *MockComputeMockRecorder) FindServersByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServersByName", reflect.TypeOf((*MockCompute)(nil).FindServersByName), ctx, name)
}

// GetKeyPair mocks base method.
func (m *MockCompute) GetKeyPair(ctx context.Context, name string) (*keypairs.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyPair", ctx, name)
	ret0, _ := ret[0].(*keypairs.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyPair indicates an expected call of GetKeyPair.
func (mr *MockComputeMockRecorder) GetKeyPair(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPair", reflect.TypeOf((*MockCompute)(nil).GetKeyPair), ctx, name)
}

// GetServerGroup mocks base method.
func (m *MockCompute) GetServerGroup(ctx context.Context, id string) (*servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerGroup", ctx, id)
	ret0, _ := ret[0].(*servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerGroup indicates an expected call of GetServerGroup.
func (mr *MockComputeMockRecorder) GetServerGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerGroup", reflect.TypeOf((*MockCompute)(nil).GetServerGroup), ctx, id)
}

// ListServerGroups mocks base method.
func (m *MockCompute) ListServerGroups(ctx context.Context) ([]servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServerGroups", ctx)
	ret0, _ := ret[0].([]servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServerGroups indicates an expected call of ListServerGroups.
func (mr *MockComputeMockRecorder) ListServerGroups(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerGroups", reflect.TypeOf((*MockCompute)(nil).ListServerGroups), ctx)
}

// MockDNS is a mock of DNS interface.
type MockDNS struct {
	ctrl     *gomock.Controller
	recorder *MockDNSMockRecorder
	isgomock struct{}
}

// MockDNSMockRecorder is the mock recorder for MockDNS.
type MockDNSMockRecorder struct {
	mock *MockDNS
}

// NewMockDNS creates a new mock instance.
func NewMockDNS(ctrl *gomock.Controller) *MockDNS {
	mock := &MockDNS{ctrl: ctrl}
	mock.recorder = &MockDNSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNS) EXPECT() *MockDNSMockRecorder {
	return m.recorder
}

// CreateOrUpdateRecordSet mocks base method.
func (m *MockDNS) CreateOrUpdateRecordSet(ctx context.Context, zoneID, name, recordType string, records []string, ttl int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRecordSet", ctx, zoneID, name, recordType, records, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateRecordSet indicates an expected call of CreateOrUpdateRecordSet.
func (mr *MockDNSMockRecorder) CreateOrUpdateRecordSet(ctx, zoneID, name, recordType, records, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRecordSet", reflect.TypeOf((*MockDNS)(nil).CreateOrUpdateRecordSet), ctx, zoneID, name, recordType, records, ttl)
}

// DeleteRecordSet mocks base method.
func (m *MockDNS) DeleteRecordSet(ctx context.Context, zoneID, name, recordType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecordSet", ctx, zoneID, name, recordType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecordSet indicates an expected call of DeleteRecordSet.
func (mr *MockDNSMockRecorder) DeleteRecordSet(ctx, zoneID, name, recordType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecordSet", reflect.TypeOf((*MockDNS)(nil).DeleteRecordSet), ctx, zoneID, name, recordType)
}

// GetZones mocks base method.
func (m *MockDNS) GetZones(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZones", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZones indicates an expected call of GetZones.
func (mr *MockDNSMockRecorder) GetZones(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZones", reflect.TypeOf((*MockDNS)(nil).GetZones), ctx)
}

// MockNetworking is a mock of Networking interface.
type MockNetworking struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingMockRecorder
	isgomock struct{}
}

// MockNetworkingMockRecorder is the mock recorder for MockNetworking.
type MockNetworkingMockRecorder struct {
	mock *MockNetworking
}

// NewMockNetworking creates a new mock instance.
func NewMockNetworking(ctrl *gomock.Controller) *MockNetworking {
	mock := &MockNetworking{ctrl: ctrl}
	mock.recorder = &MockNetworkingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworking) EXPECT() *MockNetworkingMockRecorder {
	return m.recorder
}

// AddRouterInterface mocks base method.
func (m *MockNetworking) AddRouterInterface(ctx context.Context, routerID string, addOpts routers.AddInterfaceOpts) (*routers.InterfaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRouterInterface", ctx, routerID, addOpts)
	ret0, _ := ret[0].(*routers.InterfaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRouterInterface indicates an expected call of AddRouterInterface.
func (mr *MockNetworkingMockRecorder) AddRouterInterface(ctx, routerID, addOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouterInterface", reflect.TypeOf((*MockNetworking)(nil).AddRouterInterface), ctx, routerID, addOpts)
}

// CreateFloatingIP mocks base method.
func (m *MockNetworking) CreateFloatingIP(ctx context.Context, createOpts floatingips.CreateOpts) (*floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFloatingIP", ctx, createOpts)
	ret0, _ := ret[0].(*floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFloatingIP indicates an expected call of CreateFloatingIP.
func (mr *MockNetworkingMockRecorder) CreateFloatingIP(ctx, createOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFloatingIP", reflect.TypeOf((*MockNetworking)(nil).CreateFloatingIP), ctx, createOpts)
}

// CreateNetwork mocks base method.
func (m *MockNetworking) CreateNetwork(ctx context.Context, opts networks.CreateOpts) (*networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", ctx, opts)
	ret0, _ := ret[0].(*networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockNetworkingMockRecorder) CreateNetwork(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockNetworking)(nil).CreateNetwork), ctx, opts)
}

// CreateRouter mocks base method.
func (m *MockNetworking) CreateRouter(ctx context.Context, createOpts routers.CreateOpts) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouter", ctx, createOpts)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouter indicates an expected call of CreateRouter.
func (mr *MockNetworkingMockRecorder) CreateRouter(ctx, createOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouter", reflect.TypeOf((*MockNetworking)(nil).CreateRouter), ctx, createOpts)
}

// CreateRule mocks base method.
func (m *MockNetworking) CreateRule(ctx context.Context, createOpts rules.CreateOpts) (*rules.SecGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", ctx, createOpts)
	ret0, _ := ret[0].(*rules.SecGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockNetworkingMockRecorder) CreateRule(ctx, createOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockNetworking)(nil).CreateRule), ctx, createOpts)
}

// CreateSecurityGroup mocks base method.
func (m *MockNetworking) CreateSecurityGroup(ctx context.Context, listOpts groups.CreateOpts) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", ctx, listOpts)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockNetworkingMockRecorder) CreateSecurityGroup(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockNetworking)(nil).CreateSecurityGroup), ctx, listOpts)
}

// CreateSubnet mocks base method.
func (m *MockNetworking) CreateSubnet(ctx context.Context, createOpts subnets.CreateOpts) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", ctx, createOpts)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockNetworkingMockRecorder) CreateSubnet(ctx, createOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockNetworking)(nil).CreateSubnet), ctx, createOpts)
}

// DeleteFloatingIP mocks base method.
func (m *MockNetworking) DeleteFloatingIP(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFloatingIP", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFloatingIP indicates an expected call of DeleteFloatingIP.
func (mr *MockNetworkingMockRecorder) DeleteFloatingIP(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFloatingIP", reflect.TypeOf((*MockNetworking)(nil).DeleteFloatingIP), ctx, id)
}

// DeleteNetwork mocks base method.
func (m *MockNetworking) DeleteNetwork(ctx context.Context, networkID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", ctx, networkID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockNetworkingMockRecorder) DeleteNetwork(ctx, networkID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockNetworking)(nil).DeleteNetwork), ctx, networkID)
}

// DeleteRouter mocks base method.
func (m *MockNetworking) DeleteRouter(ctx context.Context, routerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", ctx, routerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockNetworkingMockRecorder) DeleteRouter(ctx, routerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockNetworking)(nil).DeleteRouter), ctx, routerID)
}

// DeleteRule mocks base method.
func (m *MockNetworking) DeleteRule(ctx context.Context, ruleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", ctx, ruleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockNetworkingMockRecorder) DeleteRule(ctx, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockNetworking)(nil).DeleteRule), ctx, ruleID)
}

// DeleteSecurityGroup mocks base method.
func (m *MockNetworking) DeleteSecurityGroup(ctx context.Context, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", ctx, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockNetworkingMockRecorder) DeleteSecurityGroup(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockNetworking)(nil).DeleteSecurityGroup), ctx, groupID)
}

// DeleteSubnet mocks base method.
func (m *MockNetworking) DeleteSubnet(ctx context.Context, subnetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", ctx, subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockNetworkingMockRecorder) DeleteSubnet(ctx, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockNetworking)(nil).DeleteSubnet), ctx, subnetID)
}

// GetExternalNetworkByName mocks base method.
func (m *MockNetworking) GetExternalNetworkByName(ctx context.Context, name string) (*networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalNetworkByName", ctx, name)
	ret0, _ := ret[0].(*networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalNetworkByName indicates an expected call of GetExternalNetworkByName.
func (mr *MockNetworkingMockRecorder) GetExternalNetworkByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalNetworkByName", reflect.TypeOf((*MockNetworking)(nil).GetExternalNetworkByName), ctx, name)
}

// GetExternalNetworkNames mocks base method.
func (m *MockNetworking) GetExternalNetworkNames(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalNetworkNames", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalNetworkNames indicates an expected call of GetExternalNetworkNames.
func (mr *MockNetworkingMockRecorder) GetExternalNetworkNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalNetworkNames", reflect.TypeOf((*MockNetworking)(nil).GetExternalNetworkNames), ctx)
}

// GetFipByName mocks base method.
func (m *MockNetworking) GetFipByName(ctx context.Context, name string) ([]floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFipByName", ctx, name)
	ret0, _ := ret[0].([]floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFipByName indicates an expected call of GetFipByName.
func (mr *MockNetworkingMockRecorder) GetFipByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFipByName", reflect.TypeOf((*MockNetworking)(nil).GetFipByName), ctx, name)
}

// GetFloatingIP mocks base method.
func (m *MockNetworking) GetFloatingIP(ctx context.Context, listOpts floatingips.ListOpts) (floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloatingIP", ctx, listOpts)
	ret0, _ := ret[0].(floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFloatingIP indicates an expected call of GetFloatingIP.
func (mr *MockNetworkingMockRecorder) GetFloatingIP(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloatingIP", reflect.TypeOf((*MockNetworking)(nil).GetFloatingIP), ctx, listOpts)
}

// GetInstancePorts mocks base method.
func (m *MockNetworking) GetInstancePorts(ctx context.Context, instanceID string) ([]ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancePorts", ctx, instanceID)
	ret0, _ := ret[0].([]ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancePorts indicates an expected call of GetInstancePorts.
func (mr *MockNetworkingMockRecorder) GetInstancePorts(ctx, instanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancePorts", reflect.TypeOf((*MockNetworking)(nil).GetInstancePorts), ctx, instanceID)
}

// GetNetworkByID mocks base method.
func (m *MockNetworking) GetNetworkByID(ctx context.Context, id string) (*networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByID", ctx, id)
	ret0, _ := ret[0].(*networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByID indicates an expected call of GetNetworkByID.
func (mr *MockNetworkingMockRecorder) GetNetworkByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByID", reflect.TypeOf((*MockNetworking)(nil).GetNetworkByID), ctx, id)
}

// GetNetworkByName mocks base method.
func (m *MockNetworking) GetNetworkByName(ctx context.Context, name string) ([]networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByName", ctx, name)
	ret0, _ := ret[0].([]networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByName indicates an expected call of GetNetworkByName.
func (mr *MockNetworkingMockRecorder) GetNetworkByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByName", reflect.TypeOf((*MockNetworking)(nil).GetNetworkByName), ctx, name)
}

// GetPort mocks base method.
func (m *MockNetworking) GetPort(ctx context.Context, portID string) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort", ctx, portID)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPort indicates an expected call of GetPort.
func (mr *MockNetworkingMockRecorder) GetPort(ctx, portID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockNetworking)(nil).GetPort), ctx, portID)
}

// GetRouterByID mocks base method.
func (m *MockNetworking) GetRouterByID(ctx context.Context, id string) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterByID", ctx, id)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterByID indicates an expected call of GetRouterByID.
func (mr *MockNetworkingMockRecorder) GetRouterByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterByID", reflect.TypeOf((*MockNetworking)(nil).GetRouterByID), ctx, id)
}

// GetRouterInterfacePort mocks base method.
func (m *MockNetworking) GetRouterInterfacePort(ctx context.Context, routerID, subnetID string) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterInterfacePort", ctx, routerID, subnetID)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterInterfacePort indicates an expected call of GetRouterInterfacePort.
func (mr *MockNetworkingMockRecorder) GetRouterInterfacePort(ctx, routerID, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterInterfacePort", reflect.TypeOf((*MockNetworking)(nil).GetRouterInterfacePort), ctx, routerID, subnetID)
}

// GetSecurityGroup mocks base method.
func (m *MockNetworking) GetSecurityGroup(ctx context.Context, groupID string) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", ctx, groupID)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockNetworkingMockRecorder) GetSecurityGroup(ctx, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockNetworking)(nil).GetSecurityGroup), ctx, groupID)
}

// GetSecurityGroupByName mocks base method.
func (m *MockNetworking) GetSecurityGroupByName(ctx context.Context, name string) ([]groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupByName", ctx, name)
	ret0, _ := ret[0].([]groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupByName indicates an expected call of GetSecurityGroupByName.
func (mr *MockNetworkingMockRecorder) GetSecurityGroupByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupByName", reflect.TypeOf((*MockNetworking)(nil).GetSecurityGroupByName), ctx, name)
}

// GetSubnetByID mocks base method.
func (m *MockNetworking) GetSubnetByID(ctx context.Context, id string) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetByID", ctx, id)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetByID indicates an expected call of GetSubnetByID.
func (mr *MockNetworkingMockRecorder) GetSubnetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetByID", reflect.TypeOf((*MockNetworking)(nil).GetSubnetByID), ctx, id)
}

// ListFip mocks base method.
func (m *MockNetworking) ListFip(ctx context.Context, listOpts floatingips.ListOpts) ([]floatingips.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFip", ctx, listOpts)
	ret0, _ := ret[0].([]floatingips.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFip indicates an expected call of ListFip.
func (mr *MockNetworkingMockRecorder) ListFip(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFip", reflect.TypeOf((*MockNetworking)(nil).ListFip), ctx, listOpts)
}

// ListNetwork mocks base method.
func (m *MockNetworking) ListNetwork(ctx context.Context, listOpts networks.ListOpts) ([]networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetwork", ctx, listOpts)
	ret0, _ := ret[0].([]networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetwork indicates an expected call of ListNetwork.
func (mr *MockNetworkingMockRecorder) ListNetwork(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetwork", reflect.TypeOf((*MockNetworking)(nil).ListNetwork), ctx, listOpts)
}

// ListRouters mocks base method.
func (m *MockNetworking) ListRouters(ctx context.Context, listOpts routers.ListOpts) ([]routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouters", ctx, listOpts)
	ret0, _ := ret[0].([]routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockNetworkingMockRecorder) ListRouters(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockNetworking)(nil).ListRouters), ctx, listOpts)
}

// ListRules mocks base method.
func (m *MockNetworking) ListRules(ctx context.Context, listOpts rules.ListOpts) ([]rules.SecGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", ctx, listOpts)
	ret0, _ := ret[0].([]rules.SecGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockNetworkingMockRecorder) ListRules(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockNetworking)(nil).ListRules), ctx, listOpts)
}

// ListSecurityGroup mocks base method.
func (m *MockNetworking) ListSecurityGroup(ctx context.Context, listOpts groups.ListOpts) ([]groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroup", ctx, listOpts)
	ret0, _ := ret[0].([]groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroup indicates an expected call of ListSecurityGroup.
func (mr *MockNetworkingMockRecorder) ListSecurityGroup(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroup", reflect.TypeOf((*MockNetworking)(nil).ListSecurityGroup), ctx, listOpts)
}

// ListSubnets mocks base method.
func (m *MockNetworking) ListSubnets(ctx context.Context, listOpts subnets.ListOpts) ([]subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnets", ctx, listOpts)
	ret0, _ := ret[0].([]subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets.
func (mr *MockNetworkingMockRecorder) ListSubnets(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockNetworking)(nil).ListSubnets), ctx, listOpts)
}

// RemoveRouterInterface mocks base method.
func (m *MockNetworking) RemoveRouterInterface(ctx context.Context, routerID string, removeOpts routers.RemoveInterfaceOpts) (*routers.InterfaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRouterInterface", ctx, routerID, removeOpts)
	ret0, _ := ret[0].(*routers.InterfaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRouterInterface indicates an expected call of RemoveRouterInterface.
func (mr *MockNetworkingMockRecorder) RemoveRouterInterface(ctx, routerID, removeOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRouterInterface", reflect.TypeOf((*MockNetworking)(nil).RemoveRouterInterface), ctx, routerID, removeOpts)
}

// UpdateFIPWithPort mocks base method.
func (m *MockNetworking) UpdateFIPWithPort(ctx context.Context, fipID, portID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFIPWithPort", ctx, fipID, portID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFIPWithPort indicates an expected call of UpdateFIPWithPort.
func (mr *MockNetworkingMockRecorder) UpdateFIPWithPort(ctx, fipID, portID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFIPWithPort", reflect.TypeOf((*MockNetworking)(nil).UpdateFIPWithPort), ctx, fipID, portID)
}

// UpdateNetwork mocks base method.
func (m *MockNetworking) UpdateNetwork(ctx context.Context, networkID string, opts networks.UpdateOpts) (*networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", ctx, networkID, opts)
	ret0, _ := ret[0].(*networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetwork indicates an expected call of UpdateNetwork.
func (mr *MockNetworkingMockRecorder) UpdateNetwork(ctx, networkID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockNetworking)(nil).UpdateNetwork), ctx, networkID, opts)
}

// UpdateRouter mocks base method.
func (m *MockNetworking) UpdateRouter(ctx context.Context, routerID string, updateOpts routers.UpdateOpts) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouter", ctx, routerID, updateOpts)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouter indicates an expected call of UpdateRouter.
func (mr *MockNetworkingMockRecorder) UpdateRouter(ctx, routerID, updateOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouter", reflect.TypeOf((*MockNetworking)(nil).UpdateRouter), ctx, routerID, updateOpts)
}

// UpdateRoutesForRouter mocks base method.
func (m *MockNetworking) UpdateRoutesForRouter(ctx context.Context, routes []routers.Route, routerID string) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutesForRouter", ctx, routes, routerID)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutesForRouter indicates an expected call of UpdateRoutesForRouter.
func (mr *MockNetworkingMockRecorder) UpdateRoutesForRouter(ctx, routes, routerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutesForRouter", reflect.TypeOf((*MockNetworking)(nil).UpdateRoutesForRouter), ctx, routes, routerID)
}

// UpdateSubnet mocks base method.
func (m *MockNetworking) UpdateSubnet(ctx context.Context, id string, updateOpts subnets.UpdateOpts) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnet", ctx, id, updateOpts)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubnet indicates an expected call of UpdateSubnet.
func (mr *MockNetworkingMockRecorder) UpdateSubnet(ctx, id, updateOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnet", reflect.TypeOf((*MockNetworking)(nil).UpdateSubnet), ctx, id, updateOpts)
}

// MockLoadbalancing is a mock of Loadbalancing interface.
type MockLoadbalancing struct {
	ctrl     *gomock.Controller
	recorder *MockLoadbalancingMockRecorder
	isgomock struct{}
}

// MockLoadbalancingMockRecorder is the mock recorder for MockLoadbalancing.
type MockLoadbalancingMockRecorder struct {
	mock *MockLoadbalancing
}

// NewMockLoadbalancing creates a new mock instance.
func NewMockLoadbalancing(ctrl *gomock.Controller) *MockLoadbalancing {
	mock := &MockLoadbalancing{ctrl: ctrl}
	mock.recorder = &MockLoadbalancingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadbalancing) EXPECT() *MockLoadbalancingMockRecorder {
	return m.recorder
}

// DeleteLoadbalancer mocks base method.
func (m *MockLoadbalancing) DeleteLoadbalancer(ctx context.Context, id string, opts loadbalancers.DeleteOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadbalancer", ctx, id, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadbalancer indicates an expected call of DeleteLoadbalancer.
func (mr *MockLoadbalancingMockRecorder) DeleteLoadbalancer(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadbalancer", reflect.TypeOf((*MockLoadbalancing)(nil).DeleteLoadbalancer), ctx, id, opts)
}

// GetLoadbalancer mocks base method.
func (m *MockLoadbalancing) GetLoadbalancer(ctx context.Context, id string) (*loadbalancers.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadbalancer", ctx, id)
	ret0, _ := ret[0].(*loadbalancers.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadbalancer indicates an expected call of GetLoadbalancer.
func (mr *MockLoadbalancingMockRecorder) GetLoadbalancer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadbalancer", reflect.TypeOf((*MockLoadbalancing)(nil).GetLoadbalancer), ctx, id)
}

// ListLoadbalancers mocks base method.
func (m *MockLoadbalancing) ListLoadbalancers(ctx context.Context, listOpts loadbalancers.ListOpts) ([]loadbalancers.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadbalancers", ctx, listOpts)
	ret0, _ := ret[0].([]loadbalancers.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadbalancers indicates an expected call of ListLoadbalancers.
func (mr *MockLoadbalancingMockRecorder) ListLoadbalancers(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadbalancers", reflect.TypeOf((*MockLoadbalancing)(nil).ListLoadbalancers), ctx, listOpts)
}

// MockSharedFilesystem is a mock of SharedFilesystem interface.
type MockSharedFilesystem struct {
	ctrl     *gomock.Controller
	recorder *MockSharedFilesystemMockRecorder
	isgomock struct{}
}

// MockSharedFilesystemMockRecorder is the mock recorder for MockSharedFilesystem.
type MockSharedFilesystemMockRecorder struct {
	mock *MockSharedFilesystem
}

// NewMockSharedFilesystem creates a new mock instance.
func NewMockSharedFilesystem(ctrl *gomock.Controller) *MockSharedFilesystem {
	mock := &MockSharedFilesystem{ctrl: ctrl}
	mock.recorder = &MockSharedFilesystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedFilesystem) EXPECT() *MockSharedFilesystemMockRecorder {
	return m.recorder
}

// CreateShareNetwork mocks base method.
func (m *MockSharedFilesystem) CreateShareNetwork(ctx context.Context, createOpts sharenetworks.CreateOpts) (*sharenetworks.ShareNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShareNetwork", ctx, createOpts)
	ret0, _ := ret[0].(*sharenetworks.ShareNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShareNetwork indicates an expected call of CreateShareNetwork.
func (mr *MockSharedFilesystemMockRecorder) CreateShareNetwork(ctx, createOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShareNetwork", reflect.TypeOf((*MockSharedFilesystem)(nil).CreateShareNetwork), ctx, createOpts)
}

// DeleteShareNetwork mocks base method.
func (m *MockSharedFilesystem) DeleteShareNetwork(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShareNetwork", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShareNetwork indicates an expected call of DeleteShareNetwork.
func (mr *MockSharedFilesystemMockRecorder) DeleteShareNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShareNetwork", reflect.TypeOf((*MockSharedFilesystem)(nil).DeleteShareNetwork), ctx, id)
}

// GetShareNetwork mocks base method.
func (m *MockSharedFilesystem) GetShareNetwork(ctx context.Context, id string) (*sharenetworks.ShareNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShareNetwork", ctx, id)
	ret0, _ := ret[0].(*sharenetworks.ShareNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShareNetwork indicates an expected call of GetShareNetwork.
func (mr *MockSharedFilesystemMockRecorder) GetShareNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShareNetwork", reflect.TypeOf((*MockSharedFilesystem)(nil).GetShareNetwork), ctx, id)
}

// ListShareNetworks mocks base method.
func (m *MockSharedFilesystem) ListShareNetworks(ctx context.Context, listOpts sharenetworks.ListOpts) ([]sharenetworks.ShareNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShareNetworks", ctx, listOpts)
	ret0, _ := ret[0].([]sharenetworks.ShareNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShareNetworks indicates an expected call of ListShareNetworks.
func (mr *MockSharedFilesystemMockRecorder) ListShareNetworks(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShareNetworks", reflect.TypeOf((*MockSharedFilesystem)(nil).ListShareNetworks), ctx, listOpts)
}
