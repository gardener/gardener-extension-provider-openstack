// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gardener/gardener-extension-provider-openstack/pkg/openstack/client (interfaces: Factory,FactoryFactory,Compute,DNS,Networking,Loadbalancing)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	openstack "github.com/gardener/gardener-extension-provider-openstack/pkg/openstack"
	client "github.com/gardener/gardener-extension-provider-openstack/pkg/openstack/client"
	gomock "github.com/golang/mock/gomock"
	floatingips "github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/floatingips"
	keypairs "github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/keypairs"
	servergroups "github.com/gophercloud/gophercloud/openstack/compute/v2/extensions/servergroups"
	images "github.com/gophercloud/gophercloud/openstack/compute/v2/images"
	servers "github.com/gophercloud/gophercloud/openstack/compute/v2/servers"
	loadbalancers "github.com/gophercloud/gophercloud/openstack/loadbalancer/v2/loadbalancers"
	floatingips0 "github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/layer3/floatingips"
	routers "github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/layer3/routers"
	groups "github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/security/groups"
	rules "github.com/gophercloud/gophercloud/openstack/networking/v2/extensions/security/rules"
	networks "github.com/gophercloud/gophercloud/openstack/networking/v2/networks"
	ports "github.com/gophercloud/gophercloud/openstack/networking/v2/ports"
	subnets "github.com/gophercloud/gophercloud/openstack/networking/v2/subnets"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Compute mocks base method.
func (m *MockFactory) Compute(arg0 ...client.Option) (client.Compute, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Compute", varargs...)
	ret0, _ := ret[0].(client.Compute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compute indicates an expected call of Compute.
func (mr *MockFactoryMockRecorder) Compute(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockFactory)(nil).Compute), arg0...)
}

// DNS mocks base method.
func (m *MockFactory) DNS(arg0 ...client.Option) (client.DNS, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DNS", varargs...)
	ret0, _ := ret[0].(client.DNS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DNS indicates an expected call of DNS.
func (mr *MockFactoryMockRecorder) DNS(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DNS", reflect.TypeOf((*MockFactory)(nil).DNS), arg0...)
}

// Loadbalancing mocks base method.
func (m *MockFactory) Loadbalancing(arg0 ...client.Option) (client.Loadbalancing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Loadbalancing", varargs...)
	ret0, _ := ret[0].(client.Loadbalancing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Loadbalancing indicates an expected call of Loadbalancing.
func (mr *MockFactoryMockRecorder) Loadbalancing(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Loadbalancing", reflect.TypeOf((*MockFactory)(nil).Loadbalancing), arg0...)
}

// Networking mocks base method.
func (m *MockFactory) Networking(arg0 ...client.Option) (client.Networking, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Networking", varargs...)
	ret0, _ := ret[0].(client.Networking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Networking indicates an expected call of Networking.
func (mr *MockFactoryMockRecorder) Networking(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Networking", reflect.TypeOf((*MockFactory)(nil).Networking), arg0...)
}

// Storage mocks base method.
func (m *MockFactory) Storage(arg0 ...client.Option) (client.Storage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Storage", varargs...)
	ret0, _ := ret[0].(client.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Storage indicates an expected call of Storage.
func (mr *MockFactoryMockRecorder) Storage(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Storage", reflect.TypeOf((*MockFactory)(nil).Storage), arg0...)
}

// MockFactoryFactory is a mock of FactoryFactory interface.
type MockFactoryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryFactoryMockRecorder
}

// MockFactoryFactoryMockRecorder is the mock recorder for MockFactoryFactory.
type MockFactoryFactoryMockRecorder struct {
	mock *MockFactoryFactory
}

// NewMockFactoryFactory creates a new mock instance.
func NewMockFactoryFactory(ctrl *gomock.Controller) *MockFactoryFactory {
	mock := &MockFactoryFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactoryFactory) EXPECT() *MockFactoryFactoryMockRecorder {
	return m.recorder
}

// NewFactory mocks base method.
func (m *MockFactoryFactory) NewFactory(arg0 *openstack.Credentials) (client.Factory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFactory", arg0)
	ret0, _ := ret[0].(client.Factory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFactory indicates an expected call of NewFactory.
func (mr *MockFactoryFactoryMockRecorder) NewFactory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFactory", reflect.TypeOf((*MockFactoryFactory)(nil).NewFactory), arg0)
}

// MockCompute is a mock of Compute interface.
type MockCompute struct {
	ctrl     *gomock.Controller
	recorder *MockComputeMockRecorder
}

// MockComputeMockRecorder is the mock recorder for MockCompute.
type MockComputeMockRecorder struct {
	mock *MockCompute
}

// NewMockCompute creates a new mock instance.
func NewMockCompute(ctrl *gomock.Controller) *MockCompute {
	mock := &MockCompute{ctrl: ctrl}
	mock.recorder = &MockComputeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompute) EXPECT() *MockComputeMockRecorder {
	return m.recorder
}

// AssociateFIPWithInstance mocks base method.
func (m *MockCompute) AssociateFIPWithInstance(arg0 string, arg1 floatingips.AssociateOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateFIPWithInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateFIPWithInstance indicates an expected call of AssociateFIPWithInstance.
func (mr *MockComputeMockRecorder) AssociateFIPWithInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateFIPWithInstance", reflect.TypeOf((*MockCompute)(nil).AssociateFIPWithInstance), arg0, arg1)
}

// CreateKeyPair mocks base method.
func (m *MockCompute) CreateKeyPair(arg0, arg1 string) (*keypairs.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyPair", arg0, arg1)
	ret0, _ := ret[0].(*keypairs.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyPair indicates an expected call of CreateKeyPair.
func (mr *MockComputeMockRecorder) CreateKeyPair(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyPair", reflect.TypeOf((*MockCompute)(nil).CreateKeyPair), arg0, arg1)
}

// CreateServer mocks base method.
func (m *MockCompute) CreateServer(arg0 servers.CreateOpts) (*servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", arg0)
	ret0, _ := ret[0].(*servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockComputeMockRecorder) CreateServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockCompute)(nil).CreateServer), arg0)
}

// CreateServerGroup mocks base method.
func (m *MockCompute) CreateServerGroup(arg0, arg1 string) (*servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerGroup", arg0, arg1)
	ret0, _ := ret[0].(*servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerGroup indicates an expected call of CreateServerGroup.
func (mr *MockComputeMockRecorder) CreateServerGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerGroup", reflect.TypeOf((*MockCompute)(nil).CreateServerGroup), arg0, arg1)
}

// DeleteKeyPair mocks base method.
func (m *MockCompute) DeleteKeyPair(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyPair", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyPair indicates an expected call of DeleteKeyPair.
func (mr *MockComputeMockRecorder) DeleteKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPair", reflect.TypeOf((*MockCompute)(nil).DeleteKeyPair), arg0)
}

// DeleteServer mocks base method.
func (m *MockCompute) DeleteServer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockComputeMockRecorder) DeleteServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockCompute)(nil).DeleteServer), arg0)
}

// DeleteServerGroup mocks base method.
func (m *MockCompute) DeleteServerGroup(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerGroup indicates an expected call of DeleteServerGroup.
func (mr *MockComputeMockRecorder) DeleteServerGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerGroup", reflect.TypeOf((*MockCompute)(nil).DeleteServerGroup), arg0)
}

// FindFlavorID mocks base method.
func (m *MockCompute) FindFlavorID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlavorID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlavorID indicates an expected call of FindFlavorID.
func (mr *MockComputeMockRecorder) FindFlavorID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlavorID", reflect.TypeOf((*MockCompute)(nil).FindFlavorID), arg0)
}

// FindFloatingIDByInstanceID mocks base method.
func (m *MockCompute) FindFloatingIDByInstanceID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFloatingIDByInstanceID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFloatingIDByInstanceID indicates an expected call of FindFloatingIDByInstanceID.
func (mr *MockComputeMockRecorder) FindFloatingIDByInstanceID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFloatingIDByInstanceID", reflect.TypeOf((*MockCompute)(nil).FindFloatingIDByInstanceID), arg0)
}

// FindImages mocks base method.
func (m *MockCompute) FindImages(arg0 string) ([]images.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindImages", arg0)
	ret0, _ := ret[0].([]images.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindImages indicates an expected call of FindImages.
func (mr *MockComputeMockRecorder) FindImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindImages", reflect.TypeOf((*MockCompute)(nil).FindImages), arg0)
}

// FindServersByName mocks base method.
func (m *MockCompute) FindServersByName(arg0 string) ([]servers.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServersByName", arg0)
	ret0, _ := ret[0].([]servers.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServersByName indicates an expected call of FindServersByName.
func (mr *MockComputeMockRecorder) FindServersByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServersByName", reflect.TypeOf((*MockCompute)(nil).FindServersByName), arg0)
}

// GetKeyPair mocks base method.
func (m *MockCompute) GetKeyPair(arg0 string) (*keypairs.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyPair", arg0)
	ret0, _ := ret[0].(*keypairs.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyPair indicates an expected call of GetKeyPair.
func (mr *MockComputeMockRecorder) GetKeyPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPair", reflect.TypeOf((*MockCompute)(nil).GetKeyPair), arg0)
}

// GetServerGroup mocks base method.
func (m *MockCompute) GetServerGroup(arg0 string) (*servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerGroup", arg0)
	ret0, _ := ret[0].(*servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerGroup indicates an expected call of GetServerGroup.
func (mr *MockComputeMockRecorder) GetServerGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerGroup", reflect.TypeOf((*MockCompute)(nil).GetServerGroup), arg0)
}

// ListImages mocks base method.
func (m *MockCompute) ListImages(arg0 images.ListOpts) ([]images.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", arg0)
	ret0, _ := ret[0].([]images.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockComputeMockRecorder) ListImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockCompute)(nil).ListImages), arg0)
}

// ListServerGroups mocks base method.
func (m *MockCompute) ListServerGroups() ([]servergroups.ServerGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServerGroups")
	ret0, _ := ret[0].([]servergroups.ServerGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServerGroups indicates an expected call of ListServerGroups.
func (mr *MockComputeMockRecorder) ListServerGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerGroups", reflect.TypeOf((*MockCompute)(nil).ListServerGroups))
}

// MockDNS is a mock of DNS interface.
type MockDNS struct {
	ctrl     *gomock.Controller
	recorder *MockDNSMockRecorder
}

// MockDNSMockRecorder is the mock recorder for MockDNS.
type MockDNSMockRecorder struct {
	mock *MockDNS
}

// NewMockDNS creates a new mock instance.
func NewMockDNS(ctrl *gomock.Controller) *MockDNS {
	mock := &MockDNS{ctrl: ctrl}
	mock.recorder = &MockDNSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDNS) EXPECT() *MockDNSMockRecorder {
	return m.recorder
}

// CreateOrUpdateRecordSet mocks base method.
func (m *MockDNS) CreateOrUpdateRecordSet(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string, arg5 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRecordSet", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateRecordSet indicates an expected call of CreateOrUpdateRecordSet.
func (mr *MockDNSMockRecorder) CreateOrUpdateRecordSet(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRecordSet", reflect.TypeOf((*MockDNS)(nil).CreateOrUpdateRecordSet), arg0, arg1, arg2, arg3, arg4, arg5)
}

// DeleteRecordSet mocks base method.
func (m *MockDNS) DeleteRecordSet(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecordSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecordSet indicates an expected call of DeleteRecordSet.
func (mr *MockDNSMockRecorder) DeleteRecordSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecordSet", reflect.TypeOf((*MockDNS)(nil).DeleteRecordSet), arg0, arg1, arg2, arg3)
}

// GetZones mocks base method.
func (m *MockDNS) GetZones(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZones", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZones indicates an expected call of GetZones.
func (mr *MockDNSMockRecorder) GetZones(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZones", reflect.TypeOf((*MockDNS)(nil).GetZones), arg0)
}

// MockNetworking is a mock of Networking interface.
type MockNetworking struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkingMockRecorder
}

// MockNetworkingMockRecorder is the mock recorder for MockNetworking.
type MockNetworkingMockRecorder struct {
	mock *MockNetworking
}

// NewMockNetworking creates a new mock instance.
func NewMockNetworking(ctrl *gomock.Controller) *MockNetworking {
	mock := &MockNetworking{ctrl: ctrl}
	mock.recorder = &MockNetworkingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworking) EXPECT() *MockNetworkingMockRecorder {
	return m.recorder
}

// AddRouterInterface mocks base method.
func (m *MockNetworking) AddRouterInterface(arg0 string, arg1 routers.AddInterfaceOpts) (*routers.InterfaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRouterInterface", arg0, arg1)
	ret0, _ := ret[0].(*routers.InterfaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRouterInterface indicates an expected call of AddRouterInterface.
func (mr *MockNetworkingMockRecorder) AddRouterInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRouterInterface", reflect.TypeOf((*MockNetworking)(nil).AddRouterInterface), arg0, arg1)
}

// CreateFloatingIP mocks base method.
func (m *MockNetworking) CreateFloatingIP(arg0 floatingips0.CreateOpts) (*floatingips0.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFloatingIP", arg0)
	ret0, _ := ret[0].(*floatingips0.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFloatingIP indicates an expected call of CreateFloatingIP.
func (mr *MockNetworkingMockRecorder) CreateFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFloatingIP", reflect.TypeOf((*MockNetworking)(nil).CreateFloatingIP), arg0)
}

// CreateNetwork mocks base method.
func (m *MockNetworking) CreateNetwork(arg0 networks.CreateOpts) (*networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", arg0)
	ret0, _ := ret[0].(*networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockNetworkingMockRecorder) CreateNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockNetworking)(nil).CreateNetwork), arg0)
}

// CreateRouter mocks base method.
func (m *MockNetworking) CreateRouter(arg0 routers.CreateOpts) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRouter", arg0)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRouter indicates an expected call of CreateRouter.
func (mr *MockNetworkingMockRecorder) CreateRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRouter", reflect.TypeOf((*MockNetworking)(nil).CreateRouter), arg0)
}

// CreateRule mocks base method.
func (m *MockNetworking) CreateRule(arg0 rules.CreateOpts) (*rules.SecGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRule", arg0)
	ret0, _ := ret[0].(*rules.SecGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRule indicates an expected call of CreateRule.
func (mr *MockNetworkingMockRecorder) CreateRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRule", reflect.TypeOf((*MockNetworking)(nil).CreateRule), arg0)
}

// CreateSecurityGroup mocks base method.
func (m *MockNetworking) CreateSecurityGroup(arg0 groups.CreateOpts) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", arg0)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockNetworkingMockRecorder) CreateSecurityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockNetworking)(nil).CreateSecurityGroup), arg0)
}

// CreateSubnet mocks base method.
func (m *MockNetworking) CreateSubnet(arg0 subnets.CreateOpts) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnet", arg0)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubnet indicates an expected call of CreateSubnet.
func (mr *MockNetworkingMockRecorder) CreateSubnet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnet", reflect.TypeOf((*MockNetworking)(nil).CreateSubnet), arg0)
}

// DeleteFloatingIP mocks base method.
func (m *MockNetworking) DeleteFloatingIP(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFloatingIP", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFloatingIP indicates an expected call of DeleteFloatingIP.
func (mr *MockNetworkingMockRecorder) DeleteFloatingIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFloatingIP", reflect.TypeOf((*MockNetworking)(nil).DeleteFloatingIP), arg0)
}

// DeleteNetwork mocks base method.
func (m *MockNetworking) DeleteNetwork(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockNetworkingMockRecorder) DeleteNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockNetworking)(nil).DeleteNetwork), arg0)
}

// DeleteRouter mocks base method.
func (m *MockNetworking) DeleteRouter(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouter", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouter indicates an expected call of DeleteRouter.
func (mr *MockNetworkingMockRecorder) DeleteRouter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouter", reflect.TypeOf((*MockNetworking)(nil).DeleteRouter), arg0)
}

// DeleteRule mocks base method.
func (m *MockNetworking) DeleteRule(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRule indicates an expected call of DeleteRule.
func (mr *MockNetworkingMockRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRule", reflect.TypeOf((*MockNetworking)(nil).DeleteRule), arg0)
}

// DeleteSecurityGroup mocks base method.
func (m *MockNetworking) DeleteSecurityGroup(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockNetworkingMockRecorder) DeleteSecurityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockNetworking)(nil).DeleteSecurityGroup), arg0)
}

// DeleteSubnet mocks base method.
func (m *MockNetworking) DeleteSubnet(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnet indicates an expected call of DeleteSubnet.
func (mr *MockNetworkingMockRecorder) DeleteSubnet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnet", reflect.TypeOf((*MockNetworking)(nil).DeleteSubnet), arg0)
}

// GetExternalNetworkByName mocks base method.
func (m *MockNetworking) GetExternalNetworkByName(arg0 string) (*networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalNetworkByName", arg0)
	ret0, _ := ret[0].(*networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalNetworkByName indicates an expected call of GetExternalNetworkByName.
func (mr *MockNetworkingMockRecorder) GetExternalNetworkByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalNetworkByName", reflect.TypeOf((*MockNetworking)(nil).GetExternalNetworkByName), arg0)
}

// GetExternalNetworkNames mocks base method.
func (m *MockNetworking) GetExternalNetworkNames(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalNetworkNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalNetworkNames indicates an expected call of GetExternalNetworkNames.
func (mr *MockNetworkingMockRecorder) GetExternalNetworkNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalNetworkNames", reflect.TypeOf((*MockNetworking)(nil).GetExternalNetworkNames), arg0)
}

// GetFipByName mocks base method.
func (m *MockNetworking) GetFipByName(arg0 string) ([]floatingips0.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFipByName", arg0)
	ret0, _ := ret[0].([]floatingips0.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFipByName indicates an expected call of GetFipByName.
func (mr *MockNetworkingMockRecorder) GetFipByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFipByName", reflect.TypeOf((*MockNetworking)(nil).GetFipByName), arg0)
}

// GetNetworkByName mocks base method.
func (m *MockNetworking) GetNetworkByName(arg0 string) ([]networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkByName", arg0)
	ret0, _ := ret[0].([]networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkByName indicates an expected call of GetNetworkByName.
func (mr *MockNetworkingMockRecorder) GetNetworkByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkByName", reflect.TypeOf((*MockNetworking)(nil).GetNetworkByName), arg0)
}

// GetPort mocks base method.
func (m *MockNetworking) GetPort(arg0 string) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort", arg0)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPort indicates an expected call of GetPort.
func (mr *MockNetworkingMockRecorder) GetPort(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockNetworking)(nil).GetPort), arg0)
}

// GetRouterByID mocks base method.
func (m *MockNetworking) GetRouterByID(arg0 string) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterByID", arg0)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterByID indicates an expected call of GetRouterByID.
func (mr *MockNetworkingMockRecorder) GetRouterByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterByID", reflect.TypeOf((*MockNetworking)(nil).GetRouterByID), arg0)
}

// GetRouterInterfacePort mocks base method.
func (m *MockNetworking) GetRouterInterfacePort(arg0, arg1 string) (*ports.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterInterfacePort", arg0, arg1)
	ret0, _ := ret[0].(*ports.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterInterfacePort indicates an expected call of GetRouterInterfacePort.
func (mr *MockNetworkingMockRecorder) GetRouterInterfacePort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterInterfacePort", reflect.TypeOf((*MockNetworking)(nil).GetRouterInterfacePort), arg0, arg1)
}

// GetSecurityGroup mocks base method.
func (m *MockNetworking) GetSecurityGroup(arg0 string) (*groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", arg0)
	ret0, _ := ret[0].(*groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockNetworkingMockRecorder) GetSecurityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockNetworking)(nil).GetSecurityGroup), arg0)
}

// GetSecurityGroupByName mocks base method.
func (m *MockNetworking) GetSecurityGroupByName(arg0 string) ([]groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupByName", arg0)
	ret0, _ := ret[0].([]groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupByName indicates an expected call of GetSecurityGroupByName.
func (mr *MockNetworkingMockRecorder) GetSecurityGroupByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupByName", reflect.TypeOf((*MockNetworking)(nil).GetSecurityGroupByName), arg0)
}

// ListFip mocks base method.
func (m *MockNetworking) ListFip(arg0 floatingips0.ListOpts) ([]floatingips0.FloatingIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFip", arg0)
	ret0, _ := ret[0].([]floatingips0.FloatingIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFip indicates an expected call of ListFip.
func (mr *MockNetworkingMockRecorder) ListFip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFip", reflect.TypeOf((*MockNetworking)(nil).ListFip), arg0)
}

// ListNetwork mocks base method.
func (m *MockNetworking) ListNetwork(arg0 networks.ListOpts) ([]networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetwork", arg0)
	ret0, _ := ret[0].([]networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetwork indicates an expected call of ListNetwork.
func (mr *MockNetworkingMockRecorder) ListNetwork(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetwork", reflect.TypeOf((*MockNetworking)(nil).ListNetwork), arg0)
}

// ListRouters mocks base method.
func (m *MockNetworking) ListRouters(arg0 routers.ListOpts) ([]routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouters", arg0)
	ret0, _ := ret[0].([]routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRouters indicates an expected call of ListRouters.
func (mr *MockNetworkingMockRecorder) ListRouters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouters", reflect.TypeOf((*MockNetworking)(nil).ListRouters), arg0)
}

// ListRules mocks base method.
func (m *MockNetworking) ListRules(arg0 rules.ListOpts) ([]rules.SecGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRules", arg0)
	ret0, _ := ret[0].([]rules.SecGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRules indicates an expected call of ListRules.
func (mr *MockNetworkingMockRecorder) ListRules(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRules", reflect.TypeOf((*MockNetworking)(nil).ListRules), arg0)
}

// ListSecurityGroup mocks base method.
func (m *MockNetworking) ListSecurityGroup(arg0 groups.ListOpts) ([]groups.SecGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroup", arg0)
	ret0, _ := ret[0].([]groups.SecGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroup indicates an expected call of ListSecurityGroup.
func (mr *MockNetworkingMockRecorder) ListSecurityGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroup", reflect.TypeOf((*MockNetworking)(nil).ListSecurityGroup), arg0)
}

// ListSubnets mocks base method.
func (m *MockNetworking) ListSubnets(arg0 subnets.ListOpts) ([]subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnets", arg0)
	ret0, _ := ret[0].([]subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets.
func (mr *MockNetworkingMockRecorder) ListSubnets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockNetworking)(nil).ListSubnets), arg0)
}

// RemoveRouterInterface mocks base method.
func (m *MockNetworking) RemoveRouterInterface(arg0 string, arg1 routers.RemoveInterfaceOpts) (*routers.InterfaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRouterInterface", arg0, arg1)
	ret0, _ := ret[0].(*routers.InterfaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveRouterInterface indicates an expected call of RemoveRouterInterface.
func (mr *MockNetworkingMockRecorder) RemoveRouterInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRouterInterface", reflect.TypeOf((*MockNetworking)(nil).RemoveRouterInterface), arg0, arg1)
}

// UpdateNetwork mocks base method.
func (m *MockNetworking) UpdateNetwork(arg0 string, arg1 networks.UpdateOpts) (*networks.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", arg0, arg1)
	ret0, _ := ret[0].(*networks.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetwork indicates an expected call of UpdateNetwork.
func (mr *MockNetworkingMockRecorder) UpdateNetwork(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockNetworking)(nil).UpdateNetwork), arg0, arg1)
}

// UpdateRouter mocks base method.
func (m *MockNetworking) UpdateRouter(arg0 string, arg1 routers.UpdateOpts) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRouter", arg0, arg1)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRouter indicates an expected call of UpdateRouter.
func (mr *MockNetworkingMockRecorder) UpdateRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRouter", reflect.TypeOf((*MockNetworking)(nil).UpdateRouter), arg0, arg1)
}

// UpdateRoutesForRouter mocks base method.
func (m *MockNetworking) UpdateRoutesForRouter(arg0 []routers.Route, arg1 string) (*routers.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoutesForRouter", arg0, arg1)
	ret0, _ := ret[0].(*routers.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoutesForRouter indicates an expected call of UpdateRoutesForRouter.
func (mr *MockNetworkingMockRecorder) UpdateRoutesForRouter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoutesForRouter", reflect.TypeOf((*MockNetworking)(nil).UpdateRoutesForRouter), arg0, arg1)
}

// UpdateSubnet mocks base method.
func (m *MockNetworking) UpdateSubnet(arg0 string, arg1 subnets.UpdateOpts) (*subnets.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubnet", arg0, arg1)
	ret0, _ := ret[0].(*subnets.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubnet indicates an expected call of UpdateSubnet.
func (mr *MockNetworkingMockRecorder) UpdateSubnet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubnet", reflect.TypeOf((*MockNetworking)(nil).UpdateSubnet), arg0, arg1)
}

// MockLoadbalancing is a mock of Loadbalancing interface.
type MockLoadbalancing struct {
	ctrl     *gomock.Controller
	recorder *MockLoadbalancingMockRecorder
}

// MockLoadbalancingMockRecorder is the mock recorder for MockLoadbalancing.
type MockLoadbalancingMockRecorder struct {
	mock *MockLoadbalancing
}

// NewMockLoadbalancing creates a new mock instance.
func NewMockLoadbalancing(ctrl *gomock.Controller) *MockLoadbalancing {
	mock := &MockLoadbalancing{ctrl: ctrl}
	mock.recorder = &MockLoadbalancingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadbalancing) EXPECT() *MockLoadbalancingMockRecorder {
	return m.recorder
}

// DeleteLoadbalancer mocks base method.
func (m *MockLoadbalancing) DeleteLoadbalancer(arg0 string, arg1 loadbalancers.DeleteOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadbalancer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadbalancer indicates an expected call of DeleteLoadbalancer.
func (mr *MockLoadbalancingMockRecorder) DeleteLoadbalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadbalancer", reflect.TypeOf((*MockLoadbalancing)(nil).DeleteLoadbalancer), arg0, arg1)
}

// GetLoadbalancer mocks base method.
func (m *MockLoadbalancing) GetLoadbalancer(arg0 string) (*loadbalancers.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadbalancer", arg0)
	ret0, _ := ret[0].(*loadbalancers.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadbalancer indicates an expected call of GetLoadbalancer.
func (mr *MockLoadbalancingMockRecorder) GetLoadbalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadbalancer", reflect.TypeOf((*MockLoadbalancing)(nil).GetLoadbalancer), arg0)
}

// ListLoadbalancers mocks base method.
func (m *MockLoadbalancing) ListLoadbalancers(arg0 loadbalancers.ListOpts) ([]loadbalancers.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadbalancers", arg0)
	ret0, _ := ret[0].([]loadbalancers.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadbalancers indicates an expected call of ListLoadbalancers.
func (mr *MockLoadbalancingMockRecorder) ListLoadbalancers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadbalancers", reflect.TypeOf((*MockLoadbalancing)(nil).ListLoadbalancers), arg0)
}
